from typing import Optional
from aiogram import F, Router
from mutagen.wave import WAVE
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton
import os
from aiogram.filters import CommandStart, Command
from pydub import AudioSegment
from pydub.silence import detect_nonsilent
import logging
import app.keyboards as kb
from audio_extract import extract_audio
from datetime import datetime
from app.db_storage import add_file_to_storage, upload_file_to_storage, add_file_to_storage_async, upload_file_to_storage_async
from app.requests import start_transcribe, get_status, get_result, get_onetime_token, authorize_onetime_token
from app.utils.convert import export_dialog
import asyncio
import aiofiles.os
import requests
import json 

router = Router()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def wait_for_transcription_completion(task_id: str, message: Message):
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    sent_msg = await message.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...")
    while True:
        status = get_status(task_id)
        status_text = status.get('status')
        new_text = f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {status_text}"
        if new_text != sent_msg.text:
            try:
                await sent_msg.edit_text(new_text)
                sent_msg.text = new_text  # –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–ª—è–µ–º, —Ç.–∫. aiogram Message –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç text –ø–æ—Å–ª–µ edit

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        
        if status_text == 'FINISHED':
            result = get_result(task_id)
            await sent_msg.edit_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('result_url')}")
            return result
        await asyncio.sleep(10)

async def download_and_convert_result(result_url: str, task_id: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ DOCX –∏ PDF"""
    local_json = f"downloads/{task_id}.json"
    if os.path.exists(result_url):
        import shutil
        await asyncio.to_thread(shutil.copy, result_url, local_json)
    else:
        r = await asyncio.to_thread(requests.get, result_url)
        with open(local_json, 'wb') as f:
            f.write(r.content)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ DOCX –∏ PDF
    docx_path = export_dialog(local_json, file_format='docx')
    pdf_path = export_dialog(local_json, file_format='pdf')
    
    return local_json, docx_path, pdf_path

async def upload_files_to_storage(docx_path: str, pdf_path: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Supabase –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ URL"""
    docx_name = os.path.basename(docx_path)
    pdf_name = os.path.basename(pdf_path)
    
    docx_url = await upload_file_to_storage_async(
        docx_path, f"docs/{docx_name}", 
        content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    )
    pdf_url = await upload_file_to_storage_async(pdf_path, f"pdfs/{pdf_name}", content_type='application/pdf')
    
    # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ storage
    try:
        await aiofiles.os.remove(docx_path)
        await aiofiles.os.remove(pdf_path)
        logging.info(f"–£–¥–∞–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: {docx_path}, {pdf_path}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
    
    return docx_url, pdf_url

def create_download_keyboard(docx_url: str, pdf_url: str, task_id: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å DOCX", url=docx_url)],
            [InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å PDF", url=pdf_url)],
            [InlineKeyboardButton(text="üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç", callback_data=f"send_to_pm_{task_id}")]
        ]
    )

async def send_webapp_link(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        response = get_onetime_token(tg_id=message.from_user.id)
        reply_button = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', url=f"https://139.59.145.185?token={response.get('token')}")]]
        )
        await message.answer(
            "üîó –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É!\n\n"
            "üéõÔ∏è –ù–∞ —Å–∞–π—Ç–µ –º–æ–∂–µ—à—å:\n\n"
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
            "üé§ –ù–∞–∑–Ω–∞—á–∞—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤\n"
            "‚öôÔ∏è –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
            "–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üöÄ‚ú®", 
            parse_mode="Markdown",
            reply_markup=reply_button
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

async def process_transcription_result(result: dict, task_id: str, message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    result_url = result.get('result_url')
    if not result_url:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        return
    
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        local_json, docx_path, pdf_path = await download_and_convert_result(result_url, task_id)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        docx_url, pdf_url = await upload_files_to_storage(docx_path, pdf_path)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = create_download_keyboard(docx_url, pdf_url, task_id)
        await message.answer(
            "üéâ –Ø –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–≤–æ–π —Ñ–∞–π–ª!\n\n"
            "üìã –í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            "üì± –¢–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç ‚Äî —á–∏—Ç–∞–π –ø—Ä—è–º–æ –∑–¥–µ—Å—å!\n"
            "üìé –§–∞–π–ª–æ–º ‚Äî —Å–∫–∞—á–∞–π –∏ —Å–æ—Ö—Ä–∞–Ω–∏",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await send_webapp_link(message)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")

async def start_transcription_task(file_name: str, file_url: str, message: Message):
    """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    try:
        start_resp = start_transcribe(file_name, file_url, message.from_user.id)
        task_id = start_resp.get("id")
        await message.answer(
            f"üìã –¢–≤–æ–π ID: {task_id}\n\n"
            "üíæ –°–æ—Ö—Ä–∞–Ω–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è —Å–∞–ø–ø–æ—Ä—Ç—É! üÜò", 
            parse_mode="Markdown"
        )
        return task_id
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        return None

@router.message(CommandStart())
async def cmd_start(message: Message):
    # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ one-time token
    try:
        token_response = get_onetime_token(tg_id=message.from_user.id)
        token = token_response.get('token')
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ one-time token: {e}')
        return

    # 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ one-time token
    try:
        auth_response = authorize_onetime_token(token)
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}')
        return

    # 3. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
    await message.answer(
        "üé§ –ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ!\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.\n"
        "–ü–µ—Ä–≤—ã–µ 20 –º–∏–Ω—É—Ç ‚Äî –ë–ï–°–ü–õ–ê–¢–ù–û! üÜì\n\n"
        "–î–∞–ª—å—à–µ: X —Ä—É–±–ª–µ–π –∑–∞ –º–∏–Ω—É—Ç—É\n"
        "üöÄ –ñ–¥—É —Ç–≤–æ–π —Ñ–∞–π–ª! üì§",
        parse_mode="Markdown",
        reply_markup=kb.main
    )
    

#–ê –ù–£–ñ–ï–ù –õ–ò –•–ï–õ–ü?
@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:')

@router.message(F.text == 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ')
async def cmd_audio(message: Message):
    await message.answer(
        "üìÅ –ñ–¥—É —Ç–≤–æ–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ! üéµüé¨\n"
        "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã —Ñ–∞–π–ª –±—ã–ª –Ω–µ –±–æ–ª–µ–µ 2 –ì–ë\n"
        "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–π! ‚ú®",
        parse_mode="Markdown",
    )


# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–°
@router.message(F.voice)
async def handle_voice(message: Message):
    file_id = message.voice.file_id
    await message.answer('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...')
    asyncio.create_task(process_audio(message, file_id, "voice"))

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–£–î–ò–û
@router.message(F.audio)
async def handle_audio(message: Message):
    file_id = message.audio.file_id
    await message.answer('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...')
    asyncio.create_task(process_audio(message, file_id, "audio"))

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ò–î–ï–û
@router.message(F.content_type == "video")
async def handle_video(message: Message):
    logging.basicConfig(level=logging.INFO)
    file_id = message.video.file_id
    file_size = message.video.file_size
    logging.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size}")
    await message.answer('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...')
    asyncio.create_task(process_video(message, file_id))

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–†–£–ñ–û–ß–ö–û–í –í –¢–ì
@router.message(F.content_type == "video_note")
async def handle_video_note(message: Message):
    file_id = message.video_note.file_id
    await message.answer('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...')
    asyncio.create_task(process_video(message, file_id))

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–ê–ô–õ–û–í –ù–ï –Ø–í–õ–Ø–Æ–©–ò–•–°–Ø –ê–£–î–ò–û –ò–õ–ò –ì–° 
@router.message(F.photo | F.document)
async def handle_another_files(message: Message):
    await message.answer("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

async def process_video(message: Message, file_id: str):
    logging.basicConfig(level=logging.INFO)
    try:
        bot = message.bot
        file = await bot.get_file(file_id)
        file_path = file.file_path

        file_format = get_video_format(file_path.lower())
        if not file_format:
            logging.error(f"–î–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {file_path}")
            await message.reply("–î–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª")
            return
        
        timestamp = datetime.now().strftime("%Y.%m.%d_%H-%M-%S")
        file_name = f"{message.from_user.id}_{timestamp}{file_format}"
        save_path = os.path.join("downloads", file_name)

        await bot.download_file(file_path, destination=save_path)
        logging.info("–°–∫–∞—á–∞–Ω –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
        
        audio_file_name = f"{message.from_user.id}_{timestamp}.wav"
        output_path = os.path.join("downloads", audio_file_name)
        await asyncio.to_thread(extract_audio, f"downloads/{file_name}", output_path, output_format="wav")
        await aiofiles.os.remove(f"downloads/{file_name}")

        if not await has_audio(output_path):
            logging.error(f"–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–≤—É–∫–∞ –∏–ª–∏ –±–∏—Ç—ã–π")
            await message.answer('–§–∞–π–ª —Ç–∏—Ö–∏–π –∏–ª–∏ –±–∏—Ç—ã–π, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª')
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                await aiofiles.os.remove(save_path)
                await aiofiles.os.remove(output_path)
                logging.info(f"–£–¥–∞–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {save_path}, {output_path}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            return
        
        file_url = await add_file_to_storage_async(output_path, f"audio/{audio_file_name}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞
        audio = WAVE(output_path)
        duration = audio.info.length
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–ª–∏–Ω–∞ –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∏: {duration:.2f}")
        await print_price(int(duration), message)

        # –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ storage
        try:
            await aiofiles.os.remove(output_path)
            logging.info(f"–£–¥–∞–ª–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª: {output_path}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}")

        # –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        task_id = await start_transcription_task(audio_file_name, file_url, message)
        if not task_id:
            return

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = await wait_for_transcription_completion(task_id, message)
        await process_transcription_result(result, task_id, message)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {str(e)}")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            if 'save_path' in locals():
                await aiofiles.os.remove(save_path)
            if 'output_path' in locals():
                await aiofiles.os.remove(output_path)
            logging.info("–û—á–∏—â–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
        except Exception as cleanup_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleanup_error}")

def get_video_format(file_path: str) -> Optional[str]:
    formats = [".webm", ".mp4", ".mov", ".avi", ".mkv"]
    for fmt in formats:
        if file_path.endswith(fmt):
            return fmt
    return None

async def process_audio(message: Message, file_id: str, file_type: str):
    logging.basicConfig(level=logging.INFO)
    try:
        # –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ï
        bot = message.bot
        file = await bot.get_file(file_id)
        file_path = file.file_path    

        timestamp = datetime.now().strftime("%Y.%m.%d_%H-%M-%S")
        # –ò–ú–Ø –§–ê–ô–õ–ê
        audio_format = get_audio_format(file_path.lower())
        file_name = f"{message.from_user.id}_{timestamp}{audio_format}"
        logging.info(f"{file_path}: {audio_format}")
        save_path = os.path.join("downloads", file_name)

        await bot.download_file(file_path, destination=save_path)
        logging.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")

        # –ü–†–û–í–ï–†–ö–ê –ù–ê –ó–í–£–ö –í –§–ê–ô–õ–ï
        #if not await has_audio(save_path):
        #    logging.error(f"–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–≤—É–∫–∞ –∏–ª–∏ –±–∏—Ç—ã–π")
        #    await message.answer('–§–∞–π–ª —Ç–∏—Ö–∏–π –∏–ª–∏ –±–∏—Ç—ã–π, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª')
        
        file_url = await add_file_to_storage_async(save_path, f"audio/{file_name}")

        # –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ storage
        try:
            await aiofiles.os.remove(save_path)
            logging.info(f"–£–¥–∞–ª–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª: {save_path}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}")

        duration = message.voice.duration if file_type == "voice" else message.audio.duration
        await print_price(duration, message)

        # –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        task_id = await start_transcription_task(file_name, file_url, message)
        if not task_id:
            return

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = await wait_for_transcription_completion(task_id, message)
        await process_transcription_result(result, task_id, message)
        
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            if 'save_path' in locals():
                await aiofiles.os.remove(save_path)
            logging.info("–û—á–∏—â–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
        except Exception as cleanup_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {cleanup_error}")
                      
def get_audio_format(file_path: str) -> Optional[str]:
    formats = [".mp3", ".wav", ".m4a", ".flac", ".ogg", ".aac", ".oga"]
    for fmt in formats:
        if file_path.endswith(fmt):
            return fmt
    return None


async def print_price(duration: int, message: Message):
    cost = calculate_cost(duration)  # –°–¢–û–ò–ú–û–°–¢–¨
    prices = [LabeledPrice(label="XTR", amount=int(cost))] 
    await message.answer(
        "‚úÖ –ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Ñ–∞–π–ª!\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 60}:{duration % 60:02d} –º–∏–Ω.\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} XTR\n"
        "üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É... ‚ö°",
        parse_mode="Markdown",
    )

    # --- –ó–ê–ì–õ–£–®–ö–ê –û–ü–õ–ê–¢–´ ---
    # await message.answer_invoice(
    #     title="–û–ø–ª–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏",
    #     description=f"–°—É–º–º–∞: {cost} XTR",
    #     prices=prices,
    #     provider_token="",
    #     payload="trancrib_payment",
    #     currency="XTR",
    #     reply_markup=kb.payment_keyboard(int(cost)), 
    # )
    await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

async def has_audio(audio_path: str, silence_thresh=-50.0, min_silence_len=1000) -> bool:
    audio = AudioSegment.from_file(audio_path)
    nonsilent_ranges = detect_nonsilent(
        audio, 
        min_silence_len=min_silence_len, 
        silence_thresh=silence_thresh
    )
    return len(nonsilent_ranges) > 0

from aiogram.types import PreCheckoutQuery

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):  
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def success_payment_handler(message: Message):  
    await message.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–ø–ª–∞—Ç—É!ü§ó")


def calculate_cost(duration_sec: int) -> float:
    cost_per_minute = 1 # –ó–í–Å–ó–î–´
    minutes = max(1, (duration_sec + 59) // 60)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
    return minutes * cost_per_minute
#–¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø
# –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –û–¢–ü–†–ê–í–ò–¢–¨ –¢–ï–ö–°–¢ –í –õ–°
from aiogram.types import CallbackQuery

@router.callback_query(lambda c: c.data.startswith("send_to_pm_"))
async def send_to_private(callback_query: CallbackQuery):
    task_id = callback_query.data.split("_")[-1]
    user_id = callback_query.from_user.id
    json_path = f"downloads/{task_id}.json"

    try:
        if not os.path.exists(json_path):
            await callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        with open(json_path, 'r', encoding='utf-8') as f:
            json_content = json.load(f)

        # json_content - —Å–ø–∏—Å–æ–∫ —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
        formatted_text = ""
        for segment in json_content:
            speaker = segment.get("speaker", "UNKNOWN_SPEAKER")
            word = segment.get("word", "")
            formatted_text += f"{speaker}: {word}\n"

        formatted_text = formatted_text.strip()
        if not formatted_text:
            await callback_query.answer("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å", show_alert=True)
            return

        max_length = 4000
        if len(formatted_text) > max_length:
            parts = [formatted_text[i:i+max_length] for i in range(0, len(formatted_text), max_length)]
            for i, part in enumerate(parts, 1):
                await callback_query.bot.send_message(chat_id=user_id, text=f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (—á–∞—Å—Ç—å {i}):\n{part}")
            await callback_query.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–° —á–∞—Å—Ç—è–º–∏!")
        else:
            await callback_query.bot.send_message(chat_id=user_id, text=f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{formatted_text}")
            await callback_query.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–°!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –õ–°: {e}")
        await callback_query.answer(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –õ–°", show_alert=True)
